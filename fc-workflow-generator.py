import json
from datetime import datetime

COMMON_PLACEHOLDERS = {
    "[[system.rejected.location.ref]]": "AUTO::system.rejected.location",
    "[[inventory.catalogue.ref]]": "AUTO::inventory.catalogue",
    "[[inventory.retailer.id]]": "AUTO::retailer",
    "[[carrier.ref]]": "AUTO::carrier",
    "[[label.url]]": "AUTO::label.url"
}

def get_autofill(subtype: str):
    dynamic = {
        f"[[workflow:order:{subtype}:network.ref]]": f"AUTO::{subtype}::network",
        f"[[workflow:order:{subtype}:virtual.catalogue.ref]]": f"AUTO::{subtype}::virtual.catalogue"
    }
    return {**COMMON_PLACEHOLDERS, **dynamic}

def metadata(name, subtype, desc, version="1.0"):
    return {
        "retailerId": "[[retailer.id]]",
        "version": version,
        "entityType": "ORDER",
        "entitySubtype": subtype,
        "description": desc,
        "versionComment": "Generated by AI agent",
        "createdBy": "AgentAI",
        "createdOn": datetime.utcnow().isoformat() + "+00:00",
        "id": None,
        "name": name
    }

def order_cancel_rules():
    return [
        {
            "name": "RequestCancellation",
            "description": "Customer requests cancellation",
            "type": "ORDER",
            "eventType": "NORMAL",
            "rules": [
                {"name": "[[account.id]].core.SetState", "props": {"status": "CANCELLATION_REQUESTED"}},
                {"name": "[[account.id]].core.SendEvent", "props": {"eventName": "ValidateCancellation"}}
            ],
            "triggers": [{"status": "CREATED"}],
            "userActions": []
        },
        {
            "name": "ValidateCancellation",
            "description": "Validate and cancel order",
            "type": "ORDER",
            "eventType": "NORMAL",
            "rules": [
                {"name": "[[account.id]].core.SetState", "props": {"status": "CANCELLED"}}
            ],
            "triggers": [{"status": "CANCELLATION_REQUESTED"}],
            "userActions": []
        }
    ]

def statuses():
    return [
        {"name": "CREATED", "entityType": "ORDER", "category": "BOOKING"},
        {"name": "CANCELLATION_REQUESTED", "entityType": "ORDER", "category": "BOOKING"},
        {"name": "CANCELLED", "entityType": "ORDER", "category": "DONE"}
    ]

def settings():
    return {
        "fc.rubix.sdk.primaryEntityCache": "flush-on-mutation",
        "fc.rubix.sdk.webhook.retry.method": "preserve-event-details"
    }

def generate_order_cancellation_workflow():
    subtype = "cancel"
    wf = metadata("ORDER::CANCEL_AGENT", subtype, "Order cancellation workflow")
    wf["rulesets"] = order_cancel_rules()
    wf["statuses"] = statuses()
    wf["settings"] = settings()
    wf.update(get_autofill(subtype))
    return wf

if __name__ == "__main__":
    workflow = generate_order_cancellation_workflow()
    print(json.dumps(workflow, indent=2))
